#=========================================================================
# Mentor Calibre GDS Merge
#=========================================================================
# Author : Christopher Torng
# Date   : November 5, 2019
#

name: mentor-calibre-gdsmerge

#-------------------------------------------------------------------------
# Inputs and Outputs
#-------------------------------------------------------------------------

inputs:
  - design.gds.gz
  - adk

outputs:
  - design_merged.gds

#-------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------

commands:
  # - cp ../../build_prbs/18-cadence-innovus-signoff/results/prbs_generator_syn-merged.gds ./inputs/prbs_generator_syn.gds
  # - cp ../../build_16t4/18-cadence-innovus-signoff/results/hr_16t4_mux_top-merged.gds ./inputs/hr_16t4_mux_top.gds
  # - cp ../../build_4t1/19-cadence-innovus-signoff/results/qr_4t1_mux_top-merged.gds ./inputs/qr_4t1_mux_top.gds
  # - cp /tmp/canw/mflowgen/build/build_digital/8-submodule/outputs/osc_core.gds ./inputs/osc_core.gds
  # - cp /tmp/canw/mflowgen/build/build_digital/8-submodule/outputs/fine_freq_track.gds ./inputs/fine_freq_track.gds
  # For some reason, Calibre requires this directory to exist
  - mkdir -p $HOME/.calibrewb_workspace/tmp
  # Glob for all gds files in adk
  # Done manually because -indir inputs/adk did not work on Calibre 17
  - ins=""; for f in inputs/adk/*.gds*; do ins="$ins -in $f"; done
  - for f in inputs/*.gds*; do ins="$ins -in $f"; done
  # Use calibredrv to merge gds files
  # Need 'echo |' to stop calibredrv from hanging if the step is backgrounded,
  # which is a known calibredrv bug noted in the manual (see calibr_drv_ref.pdf)
  - echo | calibredrv -a layout filemerge \
               -indir inputs \
               $ins
               -topcell {design_name} \
               -out design_merged.gds 2>&1 | tee merge.log
  - mkdir -p outputs && cd outputs
  - ln -sf ../design_merged.gds

#-------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------

parameters:
  design_name: undefined

#-------------------------------------------------------------------------
# Debug
#-------------------------------------------------------------------------

debug:
  - calibredrv -m design_merged.gds \
               -l inputs/adk/calibre.layerprops

#-------------------------------------------------------------------------
# Assertions
#-------------------------------------------------------------------------

preconditions:

  - assert Tool( 'calibredrv' )
  - assert File( 'inputs/design.gds.gz' )
  - assert File ( '../../build_prbs/18-cadence-innovus-signoff/results/prbs_generator_syn-merged.gds' )
  - assert File ( '../../build_16t4/18-cadence-innovus-signoff/results/hr_16t4_mux_top-merged.gds' )
  - assert File ( '../../build_4t1/19-cadence-innovus-signoff/results/qr_4t1_mux_top-merged.gds' )

postconditions:

  - assert File( 'outputs/design_merged.gds' )

  # Duplicate structures
  #
  # GDS can be hierarchical, meaning they have holes where library cells
  # (e.g., stdcell GDS) can be filled in. If library cell names conflict,
  # there is a chance that one definition will overwrite the other and you
  # will see a very weird GDS that may not be functional or DRC clean
  # anymore (e.g., one SRAM macro may now be using another SRAM macro's
  # bitcell array). If a conflict happens unexpectedly here and goes by
  # undetected, it can take days or weeks to debug LVS before finally
  # realizing it was an incorrect GDS merge.
  #
  # Assert here to make sure we detect it early. There is a choice for
  # what to do next for the merged GDS: (1) use one library's version, (2)
  # use the other library's version, (3) rename both and each reference
  # their own version, (4) something else...
  #

  - "assert 'WARNING: Ignoring duplicate structure'
      not in File( 'merge.log' )"
